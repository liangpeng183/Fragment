package com.smart.fragment.utils;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.text.TextUtils;import android.util.Base64;import java.io.ByteArrayOutputStream;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;/* *   bitmap  to   base64 （String） * */public class BitmapAndStringChange {    /**     * Base64字符串转换成图片     *     * @param string     * @return     */    public static Bitmap stringToBitmap(String string) {        Bitmap bitmap = null;        try {            byte[] bitmapArray = Base64.decode(string, Base64.DEFAULT);            bitmap = BitmapFactory.decodeByteArray(bitmapArray, 0, bitmapArray.length);        } catch (Exception e) {            e.printStackTrace();        }        return bitmap;    }    /**     * 图片转换成base64字符串     *     * @param bitmap     * @return     */    public static String bitmapToString(Bitmap bitmap) {        String result = null;        ByteArrayOutputStream baos = null;        try {            if (bitmap != null) {                //将Bitmap压缩至字节数组输出流ByteArrayOutputStream                baos = new ByteArrayOutputStream();                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);                baos.flush();                baos.close();                //利用Base64将字节数组输出流中的数据转换成字符串String                byte[] bitmapBytes = baos.toByteArray();                result = Base64.encodeToString(bitmapBytes, Base64.DEFAULT);            }        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                if (baos != null) {                    baos.flush();                    baos.close();                }            } catch (IOException e) {                e.printStackTrace();            }        }        return result;    }    /*    *   url  转 bitmap    * */    private static Bitmap bitmap;    public static Bitmap urlToBitmap(final String url) {        new Thread(new Runnable() {            @Override            public void run() {                URL imageurl = null;                try {                    imageurl = new URL(url);                } catch (MalformedURLException e) {                    e.printStackTrace();                }                try {                    HttpURLConnection conn = (HttpURLConnection)imageurl.openConnection();                    conn.setDoInput(true);                    conn.connect();                    InputStream is = conn.getInputStream();                    bitmap = BitmapFactory.decodeStream(is);                    is.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }).start();        return bitmap;    }    /**     * 将图片转换成Base64编码的字符串     */    public static String imageToBase64(String path){        if(TextUtils.isEmpty(path)){            return null;        }        InputStream is = null;        byte[] data = null;        String result = null;        try{            is = new FileInputStream(path);            //创建一个字符流大小的数组。            data = new byte[is.available()];            //写入数组            is.read(data);            //用默认的编码格式进行编码            result = Base64.encodeToString(data,Base64.DEFAULT);        }catch (Exception e){            e.printStackTrace();        }finally {            if(null !=is){                try {                    is.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }        return result;    }}